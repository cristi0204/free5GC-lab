controller:
  ## The name of the Ingress Controller daemonset or deployment.
  ## Autogenerated if not set or set to "".
  # name: nginx-ingress

  ## The kind of the Ingress Controller installation - deployment or daemonset.
  kind: daemonset

  ## Annotations for deployments and daemonsets
  annotations: {}

  ## Deploys the Ingress Controller for NGINX Plus.
  nginxplus: false

  # Timeout in milliseconds which the Ingress Controller will wait for a successful NGINX reload after a change or at the initial start.
  nginxReloadTimeout: 60000

  ## Support for App Protect WAF
  appprotect:
    ## Enable the App Protect WAF module in the Ingress Controller.
    enable: false
    ## Sets log level for App Protect WAF. Allowed values: fatal, error, warn, info, debug, trace
    # logLevel: fatal

  ## Support for App Protect DoS
  appprotectdos:
    ## Enable the App Protect DoS module in the Ingress Controller.
    enable: false
    ## Enable debugging for App Protect DoS.
    debug: false
    ## Max number of nginx processes to support.
    maxWorkers: 0
    ## Max number of ADMD instances.
    maxDaemons: 0
    ## RAM memory size to consume in MB.
    memory: 0

  ## Enables the Ingress Controller pods to use the host's network namespace.
  hostNetwork: true

  ## DNS policy for the Ingress Controller pods
  dnsPolicy: ClusterFirst

  ## Enables debugging for NGINX. Uses the nginx-debug binary. Requires error-log-level: debug in the ConfigMap via `controller.config.entries`.
  nginxDebug: false

  ## The log level of the Ingress Controller.
  logLevel: 1

  ## A list of custom ports to expose on the NGINX ingress controller pod. Follows the conventional Kubernetes yaml syntax for container ports.
  customPorts: []

  image:
    ## The image repository of the Ingress Controller.
    repository: nginx/nginx-ingress

    ## The tag of the Ingress Controller image.
    tag: "2.4.1"

    ## The digest of the Ingress Controller image.
    ## If digest is specified it has precedence over tag and will be used instead
    # digest: "sha256:CHANGEME"

    ## The pull policy for the Ingress Controller image.
    pullPolicy: IfNotPresent

  ## The lifecycle of the Ingress Controller pods.
  lifecycle: {}

  ## The custom ConfigMap to use instead of the one provided by default
  customConfigMap: ""

  config:
    ## The name of the ConfigMap used by the Ingress Controller.
    ## Autogenerated if not set or set to "".
    # name: nginx-config

    ## The annotations of the Ingress Controller configmap.
    annotations: {}

    ## The entries of the ConfigMap for customizing NGINX configuration.
    entries: {}

  ## It is recommended to use your own TLS certificates and keys
  defaultTLS:
    ## The base64-encoded TLS certificate for the default HTTPS server. By default, a pre-generated self-signed certificate is used.
    ## Note: It is recommended that you specify your own certificate. Alternatively, omitting the default server secret completely will configure NGINX to reject TLS connections to the default server.
    cert: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZSVENDQkMyZ0F3SUJBZ0lTQS9PMEJjRm9qMFQyc21kVFc5SFZqMXd6TUEwR0NTcUdTSWIzRFFFQkN3VUEKTURJeEN6QUpCZ05WQkFZVEFsVlRNUll3RkFZRFZRUUtFdzFNWlhRbmN5QkZibU55ZVhCME1Rc3dDUVlEVlFRRApFd0pTTXpBZUZ3MHlNakV4TURReE1UTTBORFZhRncweU16QXlNREl4TVRNME5EUmFNQjR4SERBYUJnTlZCQU1UCkV6Vm5MbUpsY214cGJtUmxkbTl3Y3k1amIyMHdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUsKQW9JQkFRRHBZZUg4M0Nlb3pNNUdUeHBTUklkYTF6Q1VtVkF3Z1E4cTczYkpBaVRMbnZpRzk3dnFySERiU1F4cgpCbFJCekIyMGpPUzF5ZnhwRVVjb3BZNVBiNFlCbHJKbEs1U3pRS1pJZGNab0NXMHkxOFk2S0RBc2FiSkgrb0w4CmNHbTE0WXA2c3RhWXBCS2NhVGlMKzdmNjlVWUdRYlN4dVE4aUxtQ3dySVFjSC9HUEFiUXphNCtvcVlOdnNvTjIKZk1LMktNN0pLM0JJSXh5dm5pYVhxSGNsMVphY1NaZGp4b2ZzY3orU0lCSnhubldwR01NWm53cTVlMCt0UUZETAp0SUUxUkQ0RmV1OXFaRFEzMytOWWp1S3pKdXpDYXJwV2pZK3BLWFVkY3VQVnVlM1p0QS81M2tURDJzRExERUNWCmhqYUtDM0xRVDNkN2QrRTZ6Q2l4TytoNW1UR0JBZ01CQUFHamdnSm5NSUlDWXpBT0JnTlZIUThCQWY4RUJBTUMKQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZEV3RUIvd1FDTUFBdwpIUVlEVlIwT0JCWUVGS2FFVUFUTXFZWEFCcGk2bGp0cWNDeTh2UTg0TUI4R0ExVWRJd1FZTUJhQUZCUXVzeGUzCldGYkxybEFKUU9ZZnI1MkxGTUxHTUZVR0NDc0dBUVVGQndFQkJFa3dSekFoQmdnckJnRUZCUWN3QVlZVmFIUjAKY0RvdkwzSXpMbTh1YkdWdVkzSXViM0puTUNJR0NDc0dBUVVGQnpBQ2hoWm9kSFJ3T2k4dmNqTXVhUzVzWlc1agpjaTV2Y21jdk1EVUdBMVVkRVFRdU1DeUNGU291TldjdVltVnliR2x1WkdWMmIzQnpMbU52YllJVE5XY3VZbVZ5CmJHbHVaR1YyYjNCekxtTnZiVEJNQmdOVkhTQUVSVEJETUFnR0JtZUJEQUVDQVRBM0Jnc3JCZ0VFQVlMZkV3RUIKQVRBb01DWUdDQ3NHQVFVRkJ3SUJGaHBvZEhSd09pOHZZM0J6TG14bGRITmxibU55ZVhCMExtOXlaekNDQVFZRwpDaXNHQVFRQjFua0NCQUlFZ2ZjRWdmUUE4Z0IzQUhveWpGVFl0eTIySU9vNDRGSWU2WVFXY0RJVGhVMDcwaXZCCk9sZWpVdXRTQUFBQmhFS2k3dG9BQUFRREFFZ3dSZ0loQU12TUlRS1lEODZ0UzQxWDVOZTVaa0JiOEpKejFuU08KWExVNE1CTXBremFmQWlFQWxDbWc1VlRINmk3MzJRYm9aQ0NMb2s1TDQ1NDhzcEp6SGU0TGJJQnZ3MWtBZHdDMwpQdnNrMzV4TnVuWHlPY1c2V1BSc1hmeEN6M3FmTmNTZUhRbUJKZTIwbVFBQUFZUkNvdTdOQUFBRUF3QklNRVlDCklRRDNaeWlwVWxxcFNRenllTnRFOW5CQjV6SU40S0tHNUcyd2JxSno3cjdLRFFJaEFKcklBV2wyNTZlQjVablUKNGY4QklNOEg5N25lKzZ5VnU0UXM3RGlQRCswOE1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQm0zb3VRNVN2agpqZkRjYnJDUWdXYUo4Rko2WXNkNUw5MTR6RXFBSXZYK3FycGFmV25PcWJCNmU3SWtOUWFaWTZFZi8yRldPNkRMClVIc1pNMEw3ZDhZMWRRRW9UdW4vb1dBd2NmL2h1dVZhaExSUlJCNE9LVVR5YzFhWEdWMEZ0enk5TzhITU1FVnkKM0N0UC9VL3N3NWE4WEZpZkZpa1J2SVNsM0FmajYzSDNIRTRIQjVnNk9SOFM0UzIraUJjVFB2NEhHbjI4QXV4YQpRdncrU0wzbHhRRzUwVzljYXlIVHhWUlV3ckVzejRiZVN1Sm84ZzRnUUNzM3NKZ3J4ZlRwaWJsY2NSbmcyckpJCmZTVWRodmFQaUwxb0cyaFM1dGtSNy8yS2Y3RGhHWWpuOVhNcStRQlRXa3BBZEh4T0drc2hHdDRldE5uVDNGS0gKamYwdnZPYlNTVWVlCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZGakNDQXY2Z0F3SUJBZ0lSQUpFckNFclBEQmluVS9iV0xpV25YMW93RFFZSktvWklodmNOQVFFTEJRQXcKVHpFTE1Ba0dBMVVFQmhNQ1ZWTXhLVEFuQmdOVkJBb1RJRWx1ZEdWeWJtVjBJRk5sWTNWeWFYUjVJRkpsYzJWaApjbU5vSUVkeWIzVndNUlV3RXdZRFZRUURFd3hKVTFKSElGSnZiM1FnV0RFd0hoY05NakF3T1RBME1EQXdNREF3CldoY05NalV3T1RFMU1UWXdNREF3V2pBeU1Rc3dDUVlEVlFRR0V3SlZVekVXTUJRR0ExVUVDaE1OVEdWMEozTWcKUlc1amNubHdkREVMTUFrR0ExVUVBeE1DVWpNd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFSwpBb0lCQVFDN0FoVW96UGFnbE5NUEV1eU5WWkxEK0lMeG1hWjZRb2luWFNhcXRTdTV4VXl4cjQ1citYWElvOWNQClI1UVVWVFZYako2b29qa1o5WUk4UXFsT2J2VTd3eTdiamNDd1hQTlpPT2Z0ejJud1dnc2J2c0NVSkNXSCtqZHgKc3hQbkhLemhtKy9iNUR0RlVrV1dxY0ZUempUSVV1NjFydTJQM21CdzRxVlVxN1p0RHBlbFFEUnJLOU84WnV0bQpOSHo2YTR1UFZ5bVorREFYWGJweWIvdUJ4YTNTaGxnOUY4Zm5DYnZ4Sy9lRzNNSGFjVjNVUnVQTXJTWEJpTHhnClozVm1zL0VZOTZKYzVsUC9Pb2kyUjZYL0V4anFtQWwzUDUxVCtjOEI1ZldtY0JjVXIyT2svNW16azUzY1U2Y0cKL2tpRkhhRnByaVYxdXhQTVVnUDE3VkdoaTlzVkFnTUJBQUdqZ2dFSU1JSUJCREFPQmdOVkhROEJBZjhFQkFNQwpBWVl3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdJR0NDc0dBUVVGQndNQk1CSUdBMVVkRXdFQi93UUlNQVlCCkFmOENBUUF3SFFZRFZSME9CQllFRkJRdXN4ZTNXRmJMcmxBSlFPWWZyNTJMRk1MR01COEdBMVVkSXdRWU1CYUEKRkhtMFdlWjd0dVhrQVhPQUNJaklHbGoyNlp0dU1ESUdDQ3NHQVFVRkJ3RUJCQ1l3SkRBaUJnZ3JCZ0VGQlFjdwpBb1lXYUhSMGNEb3ZMM2d4TG1rdWJHVnVZM0l1YjNKbkx6QW5CZ05WSFI4RUlEQWVNQnlnR3FBWWhoWm9kSFJ3Ck9pOHZlREV1WXk1c1pXNWpjaTV2Y21jdk1DSUdBMVVkSUFRYk1Ca3dDQVlHWjRFTUFRSUJNQTBHQ3lzR0FRUUIKZ3Q4VEFRRUJNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUNBUUNGeWs1SFBxUDNoVVNGdk5WbmVMS1lZNjExVFI2VwpQVE5sY2xRdGdhRHF3KzM0SUw5ZnpMZHdBTGR1Ty9aZWxON2tJSittNzR1eUErZWl0Ulk4a2M2MDdUa0M1M3dsCmlrZm1aVzQvUnZUWjhNNlVLKzVVemhLOGpDZEx1TUdZTDZLdnpYR1JTZ2kzeUxnamV3UXRDUGtJVno2RDJRUXoKQ2tjaGVBbUNKOE1xeUp1NXpsenlaTWpBdm5uQVQ0NXRSQXhla3JzdTk0c1E0ZWdkUkNuYldTRHRZN2toK0JJbQpsSk5Yb0IxbEJNRUtJcTRRRFVPWG9SZ2ZmdURnaGplMVdyRzlNTCtIYmlzcS95Rk9Hd1hEOVJpWDhGNnN3Nlc0CmF2QXV2RHN6dWU1TDNzejg1SytFQzRZL3dGVkROdlpvNFRZWGFvNlowZitsUUtjMHQ4RFFZemsxT1hWdThycDIKeUpNQzZhbExiQmZPREFMWnZZSDduN2RvMUFabHM0STlkMVA0am5rRHJRb3hCM1VxUTloVmwzTEVLUTczeEYxTwp5SzVHaEREWDhvVmZHS0Y1dStkZWNJc0g0WWFUdzdtUDNHRnhKU3F2MyswbFVGSm9pNUxjNWRhMTQ5cDkwSWRzCmhDRXhyb0wxKzdtcnlJa1hQZUZNNVRnTzlyMHJ2WmFCRk92VjJ6MGdwMzVaMCtMNFdQbGJ1RWpOL2x4UEZpbisKSGxVanI4Z1JzSTNxZkpPUUZ5LzlyS0lKUjBZLzhPbXd0LzhvVFdneTFtZGVIbW1qazdqMW5Zc3ZDOUpTUTZadgpNbGRsVFRLQjN6aFRoVjErWFdZcDZyamQ1SlcxemJWV0VrTE54RTdHSlRoRVVHM3N6Z0JWR1A3cFNXVFVUc3FYCm5MUmJ3SE9vcTdoSHdnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQoKLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZZRENDQkVpZ0F3SUJBZ0lRUUFGM0lUZlU2VUs0N25hcVBHUUt0ekFOQmdrcWhraUc5dzBCQVFzRkFEQS8KTVNRd0lnWURWUVFLRXh0RWFXZHBkR0ZzSUZOcFoyNWhkSFZ5WlNCVWNuVnpkQ0JEYnk0eEZ6QVZCZ05WQkFNVApEa1JUVkNCU2IyOTBJRU5CSUZnek1CNFhEVEl4TURFeU1ERTVNVFF3TTFvWERUSTBNRGt6TURFNE1UUXdNMW93ClR6RUxNQWtHQTFVRUJoTUNWVk14S1RBbkJnTlZCQW9USUVsdWRHVnlibVYwSUZObFkzVnlhWFI1SUZKbGMyVmgKY21Ob0lFZHliM1Z3TVJVd0V3WURWUVFERXd4SlUxSkhJRkp2YjNRZ1dERXdnZ0lpTUEwR0NTcUdTSWIzRFFFQgpBUVVBQTRJQ0R3QXdnZ0lLQW9JQ0FRQ3Q2Q1J6OUJRMzg1dWVLMWNvSEllKzNMZmZPSkNNYmp6bVY2QjQ5M1hDCm92NzFhbTcyQUU4bzI5NW9obXhFazdheFkvMFVFbXUvSDlMcU1ac2hmdEV6UExwSTlkMTUzN080L3hMeElacEwKd1lxR2NXbEtabVpzajM0OGNMK3RLU0lHOCtUQTVvQ3U0a3VQdDVsK2xBT2YwMGVYZkpsSUkxUG9PSzVQQ20rRApMdEZKVjR5QWRMYmFMOUE0alhzRGNDRWJkZkl3UFBxUHJ0M2FZNnZyRmsvQ2poRkxmczhMNlArMWR5NzBzbnRLCjRFd1NKUXh3alFNcG9PRlRKT3dUMmU0WnZ4Q3pTb3cvaWFOaFVkNnNod2VVOUdOeDdDN2liMXVZZ2VHSlhEUjUKYkhidk81QmllZWJicEpvdkpzWFFFT0VPM3RrUWpoYjd0L2VvOThmbEFnZVlqellJbGVmaU41WU5ObldlK3c1eQpzUjJidkFQNVNRWFlnZDBGdENyV1FlbXNBWGFWQ2cvWTM5VzlFaDgxTHlnWGJOS1l3YWdKWkhkdVJ6ZTZ6cXhaClhtaWRmM0xXaWNVR1FTaytXVDdkSnZVa3lSR25XcU5NUUI5R29abTFwenBSYm9ZN25uMXlweElGZUZudFBsRjQKRlFzRGo0M1FMd1d5UG50S0hFdHpCUkw4eHVyZ1VCTjhRNU4wczhwMDU0NGZBUWpRTU5SYmNUYTBCN3JCTURCYwpTTGVDTzVpbWZXQ0tvcU1wZ3N5NnZZTUVHNktEQTBHaDFnWHhHOEsyOEtoOGhqdEdxRWdxaU54Mm1uYS9IMnFsClBSbVA2emp6Wk43SUt3MEtLUC8zMitJVlF0UWkwQ2RkNFhuK0dPZHdpSzFPNXRtTE9zYmRKMUZ1Lzd4azlUTkQKVHdJREFRQUJvNElCUmpDQ0FVSXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QU9CZ05WSFE4QkFmOEVCQU1DQVFZdwpTd1lJS3dZQkJRVUhBUUVFUHpBOU1Ec0dDQ3NHQVFVRkJ6QUNoaTlvZEhSd09pOHZZWEJ3Y3k1cFpHVnVkSEoxCmMzUXVZMjl0TDNKdmIzUnpMMlJ6ZEhKdmIzUmpZWGd6TG5BM1l6QWZCZ05WSFNNRUdEQVdnQlRFcDdHa2V5eHgKK3R2aFM1QjEvOFFWWUlXSkVEQlVCZ05WSFNBRVRUQkxNQWdHQm1lQkRBRUNBVEEvQmdzckJnRUVBWUxmRXdFQgpBVEF3TUM0R0NDc0dBUVVGQndJQkZpSm9kSFJ3T2k4dlkzQnpMbkp2YjNRdGVERXViR1YwYzJWdVkzSjVjSFF1CmIzSm5NRHdHQTFVZEh3UTFNRE13TWFBdm9DMkdLMmgwZEhBNkx5OWpjbXd1YVdSbGJuUnlkWE4wTG1OdmJTOUUKVTFSU1QwOVVRMEZZTTBOU1RDNWpjbXd3SFFZRFZSME9CQllFRkhtMFdlWjd0dVhrQVhPQUNJaklHbGoyNlp0dQpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUFLY3dCc2xtNy9EbExRcnQyTTUxb0dyUytvNDQrL3lRb0RGVkRDCjVXeEN1MitiOUxSUHdrU0lDSFhNNndlYkZHSnVlTjdzSjdvNVhQV2lvVzVXbEhBUVU3Rzc1Sy9Rb3NNckFkU1cKOU1VZ05UUDUyR0UyNEhHTnRMaTFxb0pGbGNEeXFTTW81OWFoeTJjSTJxQkRMS29ia3gvSjN2V3JhVjBUOVZ1RwpXQ0xLVFZYa2NHZHR3bGZGUmpsQno0cFlnMWh0bWY1WDZEWU84QTRqcXYySWw5RGpYQTZVU2JXMUZ6WFNMcjlPCmhlOFk0SVdTNndZN2JDa2pDV0RjUlFKTUVoZzc2ZnNPM3R4RStGaVlydXE5UlVXaGlGMW15djRRNlcrQ3lCRkMKRGZ2cDdPT0dBTjZkRU9NNCtxUjlzZGpvU1lLRUJwc3I2R3RQQVF3NGR5NzUzZWM1Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K 

    ## The base64-encoded TLS key for the default HTTPS server. By default, a pre-generated key is used.
    ## Note: It is recommended that you specify your own key. Alternatively, omitting the default server secret completely will configure NGINX to reject TLS connections to the default server.
    key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRRHBZZUg4M0Nlb3pNNUcKVHhwU1JJZGExekNVbVZBd2dROHE3M2JKQWlUTG52aUc5N3ZxckhEYlNReHJCbFJCekIyMGpPUzF5ZnhwRVVjbwpwWTVQYjRZQmxySmxLNVN6UUtaSWRjWm9DVzB5MThZNktEQXNhYkpIK29MOGNHbTE0WXA2c3RhWXBCS2NhVGlMCis3ZjY5VVlHUWJTeHVROGlMbUN3cklRY0gvR1BBYlF6YTQrb3FZTnZzb04yZk1LMktNN0pLM0JJSXh5dm5pYVgKcUhjbDFaYWNTWmRqeG9mc2N6K1NJQkp4bm5XcEdNTVpud3E1ZTArdFFGREx0SUUxUkQ0RmV1OXFaRFEzMytOWQpqdUt6SnV6Q2FycFdqWStwS1hVZGN1UFZ1ZTNadEEvNTNrVEQyc0RMREVDVmhqYUtDM0xRVDNkN2QrRTZ6Q2l4Ck8raDVtVEdCQWdNQkFBRUNnZ0VBR1dCUlNFTlA5S1RBVVJqTXplRXhyb2p6ZVZUcVNUdmZRRlhsWHBuakVsam8Kd1JReTFLT0hhZkNaYnhHekc2eHNGbk96Y3FqUnowTFhyKzNBZVphd3hYOXpTbGpneEZUbFA3KytvUlZWVUUveAo5K1RpeUJGK0Z5R0FHSjdJZjhSVVlGOE53bThrcnVrcUF0Nk45TFd5dFg5emZGZVk4NmlEVHZLVE10T3VXbFFwCjdIVWxNYzlPL3BRNVpkc3pwSHhvUGZLMkp1RHRTSkdsbzN4V3Jpc0RSU3ZJd2c0S3BGeENEditaSVh5SGdxam8KUllySURwRmdoWFcxTzVoSDNBUXl0UUwvaW5zaHUzbEgxWEhmRzgyekc3WFJyZUNsbXRWQ1kwdmorRFpSSzB6WAo5ZFBHVkxWR042ZEt1dnZOcmpjUUpPckhwVHcwcHBHQUVVSUFubjlqSVFLQmdRRDdoNG16RTNBbjJ2ZEQybW52Ci9OUlJtTGFNOEgvYzcrNzdYN2RtTXJLU2I0eXhEVkNGdDA5QWtpZTRjeERnRkovOTU2eStCbTBZZjZ5L25PUFQKNnlZY25QQ29MMXQ5Y09pNm1qM0twaWxqVHlqd1RTM2JIbGNWQnlhU1BwbWtxZTFvZ1BOZHBQNlBIaW1ZaUpLdAphWUVTam1TOU1IOFFVUDZzdHZYL3dUdU5mUUtCZ1FEdGg4Wi8zTmNKNUY1cmIxeVBEWWt6VUs3TGt5bUhzRFFDCjNzYjAxcCtmcG82UE1LT3VEcXN6c1R3K3B3MXcwbmFDYmtNbEQ5VnFUZ3RRd2tTWEFXZGtIUGNKNDhqVkFRNHQKQjBFeUFBZEdsRmlveC9xaHFoMzlNNzhXdmVvaUw2SEFCVkkzZ0x2QnMwd3dqZ3U1bi9tV0V0SitnM04zcGZpawpuZ1FIQmRIRFZRS0JnUUM5c0NtWWMwQlJ6a0JMVzV3bzhITHVWa3pWWFVvUVJLSGwwUGx1aVMxQ1lmMm9TSEpCClpVelBWV20vSUlmSmRjUnlweFVPK2Ftc29CeVhKS3BzVnhvVzJnUmowZE1kZHRrTVlPWFl2aGJZWGdweHJzSzIKVE5zL2NIVVdOVCtKZnQwYndxUEdLM2dPVnFEbjk1Y21VRHFXMCt3RkFWM1I0RU12M1lzSHBhSlR3UUtCZ0hSZgpETlVmOFFxYm85YW0zSVlKYjZxQVlPTEQycGpycnMrcExYaE9uaTJ0Z0RLTzllSVV0YlBCcFc1Y2thMHdyM2IvClprNEdEOXpoRjVJZFcxVlFEc054bldadS9ybThwcUZRNkpRQ2g0NEFwOThvK3BXeHJyZWFYb2haeXhlc2xtWnAKTlBxVVMyaCsyMWorZnFnV3hFVE9PK3BYcEg1K0JlOUFxMkIxYld0eEFvR0FacmxncXBveHN1elZTK3g1RWEvMQpOMFptQjRXWG5ZVE1UcG1PSjRnYWJxRHBDY052M3Y3bkVxSFVKNy93RFE3SlNSWVArODRBTXJkN1FVTzRKNm91CkFleEFvbkZvZ2g2NHFuOXNFVkxsWFI4NWNqS1IwVnUyeFRybGt2Yzdkd1drcmliVHY3UE4yVVZTQnRmeTFjRWIKUmhvK2NjYW1JYzFWOFJ0dkNoYmtHaW89Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K

    ## The secret with a TLS certificate and key for the default HTTPS server.
    ## The value must follow the following format: `<namespace>/<name>`.
    ## Used as an alternative to specifying a certificate and key using `controller.defaultTLS.cert` and `controller.defaultTLS.key` parameters.
    ## Note: Alternatively, omitting the default server secret completely will configure NGINX to reject TLS connections to the default server.
    ## Format: <namespace>/<secret_name>
    secret: ""

  wildcardTLS:
    ## The base64-encoded TLS certificate for every Ingress/VirtualServer host that has TLS enabled but no secret specified.
    ## If the parameter is not set, for such Ingress/VirtualServer hosts NGINX will break any attempt to establish a TLS connection.
    cert: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZSVENDQkMyZ0F3SUJBZ0lTQS9PMEJjRm9qMFQyc21kVFc5SFZqMXd6TUEwR0NTcUdTSWIzRFFFQkN3VUEKTURJeEN6QUpCZ05WQkFZVEFsVlRNUll3RkFZRFZRUUtFdzFNWlhRbmN5QkZibU55ZVhCME1Rc3dDUVlEVlFRRApFd0pTTXpBZUZ3MHlNakV4TURReE1UTTBORFZhRncweU16QXlNREl4TVRNME5EUmFNQjR4SERBYUJnTlZCQU1UCkV6Vm5MbUpsY214cGJtUmxkbTl3Y3k1amIyMHdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUsKQW9JQkFRRHBZZUg4M0Nlb3pNNUdUeHBTUklkYTF6Q1VtVkF3Z1E4cTczYkpBaVRMbnZpRzk3dnFySERiU1F4cgpCbFJCekIyMGpPUzF5ZnhwRVVjb3BZNVBiNFlCbHJKbEs1U3pRS1pJZGNab0NXMHkxOFk2S0RBc2FiSkgrb0w4CmNHbTE0WXA2c3RhWXBCS2NhVGlMKzdmNjlVWUdRYlN4dVE4aUxtQ3dySVFjSC9HUEFiUXphNCtvcVlOdnNvTjIKZk1LMktNN0pLM0JJSXh5dm5pYVhxSGNsMVphY1NaZGp4b2ZzY3orU0lCSnhubldwR01NWm53cTVlMCt0UUZETAp0SUUxUkQ0RmV1OXFaRFEzMytOWWp1S3pKdXpDYXJwV2pZK3BLWFVkY3VQVnVlM1p0QS81M2tURDJzRExERUNWCmhqYUtDM0xRVDNkN2QrRTZ6Q2l4TytoNW1UR0JBZ01CQUFHamdnSm5NSUlDWXpBT0JnTlZIUThCQWY4RUJBTUMKQmFBd0hRWURWUjBsQkJZd0ZBWUlLd1lCQlFVSEF3RUdDQ3NHQVFVRkJ3TUNNQXdHQTFVZEV3RUIvd1FDTUFBdwpIUVlEVlIwT0JCWUVGS2FFVUFUTXFZWEFCcGk2bGp0cWNDeTh2UTg0TUI4R0ExVWRJd1FZTUJhQUZCUXVzeGUzCldGYkxybEFKUU9ZZnI1MkxGTUxHTUZVR0NDc0dBUVVGQndFQkJFa3dSekFoQmdnckJnRUZCUWN3QVlZVmFIUjAKY0RvdkwzSXpMbTh1YkdWdVkzSXViM0puTUNJR0NDc0dBUVVGQnpBQ2hoWm9kSFJ3T2k4dmNqTXVhUzVzWlc1agpjaTV2Y21jdk1EVUdBMVVkRVFRdU1DeUNGU291TldjdVltVnliR2x1WkdWMmIzQnpMbU52YllJVE5XY3VZbVZ5CmJHbHVaR1YyYjNCekxtTnZiVEJNQmdOVkhTQUVSVEJETUFnR0JtZUJEQUVDQVRBM0Jnc3JCZ0VFQVlMZkV3RUIKQVRBb01DWUdDQ3NHQVFVRkJ3SUJGaHBvZEhSd09pOHZZM0J6TG14bGRITmxibU55ZVhCMExtOXlaekNDQVFZRwpDaXNHQVFRQjFua0NCQUlFZ2ZjRWdmUUE4Z0IzQUhveWpGVFl0eTIySU9vNDRGSWU2WVFXY0RJVGhVMDcwaXZCCk9sZWpVdXRTQUFBQmhFS2k3dG9BQUFRREFFZ3dSZ0loQU12TUlRS1lEODZ0UzQxWDVOZTVaa0JiOEpKejFuU08KWExVNE1CTXBremFmQWlFQWxDbWc1VlRINmk3MzJRYm9aQ0NMb2s1TDQ1NDhzcEp6SGU0TGJJQnZ3MWtBZHdDMwpQdnNrMzV4TnVuWHlPY1c2V1BSc1hmeEN6M3FmTmNTZUhRbUJKZTIwbVFBQUFZUkNvdTdOQUFBRUF3QklNRVlDCklRRDNaeWlwVWxxcFNRenllTnRFOW5CQjV6SU40S0tHNUcyd2JxSno3cjdLRFFJaEFKcklBV2wyNTZlQjVablUKNGY4QklNOEg5N25lKzZ5VnU0UXM3RGlQRCswOE1BMEdDU3FHU0liM0RRRUJDd1VBQTRJQkFRQm0zb3VRNVN2agpqZkRjYnJDUWdXYUo4Rko2WXNkNUw5MTR6RXFBSXZYK3FycGFmV25PcWJCNmU3SWtOUWFaWTZFZi8yRldPNkRMClVIc1pNMEw3ZDhZMWRRRW9UdW4vb1dBd2NmL2h1dVZhaExSUlJCNE9LVVR5YzFhWEdWMEZ0enk5TzhITU1FVnkKM0N0UC9VL3N3NWE4WEZpZkZpa1J2SVNsM0FmajYzSDNIRTRIQjVnNk9SOFM0UzIraUJjVFB2NEhHbjI4QXV4YQpRdncrU0wzbHhRRzUwVzljYXlIVHhWUlV3ckVzejRiZVN1Sm84ZzRnUUNzM3NKZ3J4ZlRwaWJsY2NSbmcyckpJCmZTVWRodmFQaUwxb0cyaFM1dGtSNy8yS2Y3RGhHWWpuOVhNcStRQlRXa3BBZEh4T0drc2hHdDRldE5uVDNGS0gKamYwdnZPYlNTVWVlCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZGakNDQXY2Z0F3SUJBZ0lSQUpFckNFclBEQmluVS9iV0xpV25YMW93RFFZSktvWklodmNOQVFFTEJRQXcKVHpFTE1Ba0dBMVVFQmhNQ1ZWTXhLVEFuQmdOVkJBb1RJRWx1ZEdWeWJtVjBJRk5sWTNWeWFYUjVJRkpsYzJWaApjbU5vSUVkeWIzVndNUlV3RXdZRFZRUURFd3hKVTFKSElGSnZiM1FnV0RFd0hoY05NakF3T1RBME1EQXdNREF3CldoY05NalV3T1RFMU1UWXdNREF3V2pBeU1Rc3dDUVlEVlFRR0V3SlZVekVXTUJRR0ExVUVDaE1OVEdWMEozTWcKUlc1amNubHdkREVMTUFrR0ExVUVBeE1DVWpNd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUJEd0F3Z2dFSwpBb0lCQVFDN0FoVW96UGFnbE5NUEV1eU5WWkxEK0lMeG1hWjZRb2luWFNhcXRTdTV4VXl4cjQ1citYWElvOWNQClI1UVVWVFZYako2b29qa1o5WUk4UXFsT2J2VTd3eTdiamNDd1hQTlpPT2Z0ejJud1dnc2J2c0NVSkNXSCtqZHgKc3hQbkhLemhtKy9iNUR0RlVrV1dxY0ZUempUSVV1NjFydTJQM21CdzRxVlVxN1p0RHBlbFFEUnJLOU84WnV0bQpOSHo2YTR1UFZ5bVorREFYWGJweWIvdUJ4YTNTaGxnOUY4Zm5DYnZ4Sy9lRzNNSGFjVjNVUnVQTXJTWEJpTHhnClozVm1zL0VZOTZKYzVsUC9Pb2kyUjZYL0V4anFtQWwzUDUxVCtjOEI1ZldtY0JjVXIyT2svNW16azUzY1U2Y0cKL2tpRkhhRnByaVYxdXhQTVVnUDE3VkdoaTlzVkFnTUJBQUdqZ2dFSU1JSUJCREFPQmdOVkhROEJBZjhFQkFNQwpBWVl3SFFZRFZSMGxCQll3RkFZSUt3WUJCUVVIQXdJR0NDc0dBUVVGQndNQk1CSUdBMVVkRXdFQi93UUlNQVlCCkFmOENBUUF3SFFZRFZSME9CQllFRkJRdXN4ZTNXRmJMcmxBSlFPWWZyNTJMRk1MR01COEdBMVVkSXdRWU1CYUEKRkhtMFdlWjd0dVhrQVhPQUNJaklHbGoyNlp0dU1ESUdDQ3NHQVFVRkJ3RUJCQ1l3SkRBaUJnZ3JCZ0VGQlFjdwpBb1lXYUhSMGNEb3ZMM2d4TG1rdWJHVnVZM0l1YjNKbkx6QW5CZ05WSFI4RUlEQWVNQnlnR3FBWWhoWm9kSFJ3Ck9pOHZlREV1WXk1c1pXNWpjaTV2Y21jdk1DSUdBMVVkSUFRYk1Ca3dDQVlHWjRFTUFRSUJNQTBHQ3lzR0FRUUIKZ3Q4VEFRRUJNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUNBUUNGeWs1SFBxUDNoVVNGdk5WbmVMS1lZNjExVFI2VwpQVE5sY2xRdGdhRHF3KzM0SUw5ZnpMZHdBTGR1Ty9aZWxON2tJSittNzR1eUErZWl0Ulk4a2M2MDdUa0M1M3dsCmlrZm1aVzQvUnZUWjhNNlVLKzVVemhLOGpDZEx1TUdZTDZLdnpYR1JTZ2kzeUxnamV3UXRDUGtJVno2RDJRUXoKQ2tjaGVBbUNKOE1xeUp1NXpsenlaTWpBdm5uQVQ0NXRSQXhla3JzdTk0c1E0ZWdkUkNuYldTRHRZN2toK0JJbQpsSk5Yb0IxbEJNRUtJcTRRRFVPWG9SZ2ZmdURnaGplMVdyRzlNTCtIYmlzcS95Rk9Hd1hEOVJpWDhGNnN3Nlc0CmF2QXV2RHN6dWU1TDNzejg1SytFQzRZL3dGVkROdlpvNFRZWGFvNlowZitsUUtjMHQ4RFFZemsxT1hWdThycDIKeUpNQzZhbExiQmZPREFMWnZZSDduN2RvMUFabHM0STlkMVA0am5rRHJRb3hCM1VxUTloVmwzTEVLUTczeEYxTwp5SzVHaEREWDhvVmZHS0Y1dStkZWNJc0g0WWFUdzdtUDNHRnhKU3F2MyswbFVGSm9pNUxjNWRhMTQ5cDkwSWRzCmhDRXhyb0wxKzdtcnlJa1hQZUZNNVRnTzlyMHJ2WmFCRk92VjJ6MGdwMzVaMCtMNFdQbGJ1RWpOL2x4UEZpbisKSGxVanI4Z1JzSTNxZkpPUUZ5LzlyS0lKUjBZLzhPbXd0LzhvVFdneTFtZGVIbW1qazdqMW5Zc3ZDOUpTUTZadgpNbGRsVFRLQjN6aFRoVjErWFdZcDZyamQ1SlcxemJWV0VrTE54RTdHSlRoRVVHM3N6Z0JWR1A3cFNXVFVUc3FYCm5MUmJ3SE9vcTdoSHdnPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQoKLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUZZRENDQkVpZ0F3SUJBZ0lRUUFGM0lUZlU2VUs0N25hcVBHUUt0ekFOQmdrcWhraUc5dzBCQVFzRkFEQS8KTVNRd0lnWURWUVFLRXh0RWFXZHBkR0ZzSUZOcFoyNWhkSFZ5WlNCVWNuVnpkQ0JEYnk0eEZ6QVZCZ05WQkFNVApEa1JUVkNCU2IyOTBJRU5CSUZnek1CNFhEVEl4TURFeU1ERTVNVFF3TTFvWERUSTBNRGt6TURFNE1UUXdNMW93ClR6RUxNQWtHQTFVRUJoTUNWVk14S1RBbkJnTlZCQW9USUVsdWRHVnlibVYwSUZObFkzVnlhWFI1SUZKbGMyVmgKY21Ob0lFZHliM1Z3TVJVd0V3WURWUVFERXd4SlUxSkhJRkp2YjNRZ1dERXdnZ0lpTUEwR0NTcUdTSWIzRFFFQgpBUVVBQTRJQ0R3QXdnZ0lLQW9JQ0FRQ3Q2Q1J6OUJRMzg1dWVLMWNvSEllKzNMZmZPSkNNYmp6bVY2QjQ5M1hDCm92NzFhbTcyQUU4bzI5NW9obXhFazdheFkvMFVFbXUvSDlMcU1ac2hmdEV6UExwSTlkMTUzN080L3hMeElacEwKd1lxR2NXbEtabVpzajM0OGNMK3RLU0lHOCtUQTVvQ3U0a3VQdDVsK2xBT2YwMGVYZkpsSUkxUG9PSzVQQ20rRApMdEZKVjR5QWRMYmFMOUE0alhzRGNDRWJkZkl3UFBxUHJ0M2FZNnZyRmsvQ2poRkxmczhMNlArMWR5NzBzbnRLCjRFd1NKUXh3alFNcG9PRlRKT3dUMmU0WnZ4Q3pTb3cvaWFOaFVkNnNod2VVOUdOeDdDN2liMXVZZ2VHSlhEUjUKYkhidk81QmllZWJicEpvdkpzWFFFT0VPM3RrUWpoYjd0L2VvOThmbEFnZVlqellJbGVmaU41WU5ObldlK3c1eQpzUjJidkFQNVNRWFlnZDBGdENyV1FlbXNBWGFWQ2cvWTM5VzlFaDgxTHlnWGJOS1l3YWdKWkhkdVJ6ZTZ6cXhaClhtaWRmM0xXaWNVR1FTaytXVDdkSnZVa3lSR25XcU5NUUI5R29abTFwenBSYm9ZN25uMXlweElGZUZudFBsRjQKRlFzRGo0M1FMd1d5UG50S0hFdHpCUkw4eHVyZ1VCTjhRNU4wczhwMDU0NGZBUWpRTU5SYmNUYTBCN3JCTURCYwpTTGVDTzVpbWZXQ0tvcU1wZ3N5NnZZTUVHNktEQTBHaDFnWHhHOEsyOEtoOGhqdEdxRWdxaU54Mm1uYS9IMnFsClBSbVA2emp6Wk43SUt3MEtLUC8zMitJVlF0UWkwQ2RkNFhuK0dPZHdpSzFPNXRtTE9zYmRKMUZ1Lzd4azlUTkQKVHdJREFRQUJvNElCUmpDQ0FVSXdEd1lEVlIwVEFRSC9CQVV3QXdFQi96QU9CZ05WSFE4QkFmOEVCQU1DQVFZdwpTd1lJS3dZQkJRVUhBUUVFUHpBOU1Ec0dDQ3NHQVFVRkJ6QUNoaTlvZEhSd09pOHZZWEJ3Y3k1cFpHVnVkSEoxCmMzUXVZMjl0TDNKdmIzUnpMMlJ6ZEhKdmIzUmpZWGd6TG5BM1l6QWZCZ05WSFNNRUdEQVdnQlRFcDdHa2V5eHgKK3R2aFM1QjEvOFFWWUlXSkVEQlVCZ05WSFNBRVRUQkxNQWdHQm1lQkRBRUNBVEEvQmdzckJnRUVBWUxmRXdFQgpBVEF3TUM0R0NDc0dBUVVGQndJQkZpSm9kSFJ3T2k4dlkzQnpMbkp2YjNRdGVERXViR1YwYzJWdVkzSjVjSFF1CmIzSm5NRHdHQTFVZEh3UTFNRE13TWFBdm9DMkdLMmgwZEhBNkx5OWpjbXd1YVdSbGJuUnlkWE4wTG1OdmJTOUUKVTFSU1QwOVVRMEZZTTBOU1RDNWpjbXd3SFFZRFZSME9CQllFRkhtMFdlWjd0dVhrQVhPQUNJaklHbGoyNlp0dQpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUFLY3dCc2xtNy9EbExRcnQyTTUxb0dyUytvNDQrL3lRb0RGVkRDCjVXeEN1MitiOUxSUHdrU0lDSFhNNndlYkZHSnVlTjdzSjdvNVhQV2lvVzVXbEhBUVU3Rzc1Sy9Rb3NNckFkU1cKOU1VZ05UUDUyR0UyNEhHTnRMaTFxb0pGbGNEeXFTTW81OWFoeTJjSTJxQkRMS29ia3gvSjN2V3JhVjBUOVZ1RwpXQ0xLVFZYa2NHZHR3bGZGUmpsQno0cFlnMWh0bWY1WDZEWU84QTRqcXYySWw5RGpYQTZVU2JXMUZ6WFNMcjlPCmhlOFk0SVdTNndZN2JDa2pDV0RjUlFKTUVoZzc2ZnNPM3R4RStGaVlydXE5UlVXaGlGMW15djRRNlcrQ3lCRkMKRGZ2cDdPT0dBTjZkRU9NNCtxUjlzZGpvU1lLRUJwc3I2R3RQQVF3NGR5NzUzZWM1Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K 

    ## The base64-encoded TLS key for every Ingress/VirtualServer host that has TLS enabled but no secret specified.
    ## If the parameter is not set, for such Ingress/VirtualServer hosts NGINX will break any attempt to establish a TLS connection.
    key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRRHBZZUg4M0Nlb3pNNUcKVHhwU1JJZGExekNVbVZBd2dROHE3M2JKQWlUTG52aUc5N3ZxckhEYlNReHJCbFJCekIyMGpPUzF5ZnhwRVVjbwpwWTVQYjRZQmxySmxLNVN6UUtaSWRjWm9DVzB5MThZNktEQXNhYkpIK29MOGNHbTE0WXA2c3RhWXBCS2NhVGlMCis3ZjY5VVlHUWJTeHVROGlMbUN3cklRY0gvR1BBYlF6YTQrb3FZTnZzb04yZk1LMktNN0pLM0JJSXh5dm5pYVgKcUhjbDFaYWNTWmRqeG9mc2N6K1NJQkp4bm5XcEdNTVpud3E1ZTArdFFGREx0SUUxUkQ0RmV1OXFaRFEzMytOWQpqdUt6SnV6Q2FycFdqWStwS1hVZGN1UFZ1ZTNadEEvNTNrVEQyc0RMREVDVmhqYUtDM0xRVDNkN2QrRTZ6Q2l4Ck8raDVtVEdCQWdNQkFBRUNnZ0VBR1dCUlNFTlA5S1RBVVJqTXplRXhyb2p6ZVZUcVNUdmZRRlhsWHBuakVsam8Kd1JReTFLT0hhZkNaYnhHekc2eHNGbk96Y3FqUnowTFhyKzNBZVphd3hYOXpTbGpneEZUbFA3KytvUlZWVUUveAo5K1RpeUJGK0Z5R0FHSjdJZjhSVVlGOE53bThrcnVrcUF0Nk45TFd5dFg5emZGZVk4NmlEVHZLVE10T3VXbFFwCjdIVWxNYzlPL3BRNVpkc3pwSHhvUGZLMkp1RHRTSkdsbzN4V3Jpc0RSU3ZJd2c0S3BGeENEditaSVh5SGdxam8KUllySURwRmdoWFcxTzVoSDNBUXl0UUwvaW5zaHUzbEgxWEhmRzgyekc3WFJyZUNsbXRWQ1kwdmorRFpSSzB6WAo5ZFBHVkxWR042ZEt1dnZOcmpjUUpPckhwVHcwcHBHQUVVSUFubjlqSVFLQmdRRDdoNG16RTNBbjJ2ZEQybW52Ci9OUlJtTGFNOEgvYzcrNzdYN2RtTXJLU2I0eXhEVkNGdDA5QWtpZTRjeERnRkovOTU2eStCbTBZZjZ5L25PUFQKNnlZY25QQ29MMXQ5Y09pNm1qM0twaWxqVHlqd1RTM2JIbGNWQnlhU1BwbWtxZTFvZ1BOZHBQNlBIaW1ZaUpLdAphWUVTam1TOU1IOFFVUDZzdHZYL3dUdU5mUUtCZ1FEdGg4Wi8zTmNKNUY1cmIxeVBEWWt6VUs3TGt5bUhzRFFDCjNzYjAxcCtmcG82UE1LT3VEcXN6c1R3K3B3MXcwbmFDYmtNbEQ5VnFUZ3RRd2tTWEFXZGtIUGNKNDhqVkFRNHQKQjBFeUFBZEdsRmlveC9xaHFoMzlNNzhXdmVvaUw2SEFCVkkzZ0x2QnMwd3dqZ3U1bi9tV0V0SitnM04zcGZpawpuZ1FIQmRIRFZRS0JnUUM5c0NtWWMwQlJ6a0JMVzV3bzhITHVWa3pWWFVvUVJLSGwwUGx1aVMxQ1lmMm9TSEpCClpVelBWV20vSUlmSmRjUnlweFVPK2Ftc29CeVhKS3BzVnhvVzJnUmowZE1kZHRrTVlPWFl2aGJZWGdweHJzSzIKVE5zL2NIVVdOVCtKZnQwYndxUEdLM2dPVnFEbjk1Y21VRHFXMCt3RkFWM1I0RU12M1lzSHBhSlR3UUtCZ0hSZgpETlVmOFFxYm85YW0zSVlKYjZxQVlPTEQycGpycnMrcExYaE9uaTJ0Z0RLTzllSVV0YlBCcFc1Y2thMHdyM2IvClprNEdEOXpoRjVJZFcxVlFEc054bldadS9ybThwcUZRNkpRQ2g0NEFwOThvK3BXeHJyZWFYb2haeXhlc2xtWnAKTlBxVVMyaCsyMWorZnFnV3hFVE9PK3BYcEg1K0JlOUFxMkIxYld0eEFvR0FacmxncXBveHN1elZTK3g1RWEvMQpOMFptQjRXWG5ZVE1UcG1PSjRnYWJxRHBDY052M3Y3bkVxSFVKNy93RFE3SlNSWVArODRBTXJkN1FVTzRKNm91CkFleEFvbkZvZ2g2NHFuOXNFVkxsWFI4NWNqS1IwVnUyeFRybGt2Yzdkd1drcmliVHY3UE4yVVZTQnRmeTFjRWIKUmhvK2NjYW1JYzFWOFJ0dkNoYmtHaW89Ci0tLS0tRU5EIFBSSVZBVEUgS0VZLS0tLS0K

    ## The secret with a TLS certificate and key for every Ingress/VirtualServer host that has TLS enabled but no secret specified.
    ## The value must follow the following format: `<namespace>/<name>`.
    ## Used as an alternative to specifying a certificate and key using `controller.wildcardTLS.cert` and `controller.wildcardTLS.key` parameters.
    ## Format: <namespace>/<secret_name>
    secret: ""

  ## The node selector for pod assignment for the Ingress Controller pods.
  # nodeSelector: {}

  ## The termination grace period of the Ingress Controller pod.
  terminationGracePeriodSeconds: 30

  ## The resources of the Ingress Controller pods.
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
  # limits:
  #   cpu: 1
  #   memory: 1Gi


  ## The tolerations of the Ingress Controller pods.
  tolerations: []

  ## The affinity of the Ingress Controller pods.
  affinity: {}

  ## The topology spread constraints of the Ingress controller pods.
  # topologySpreadConstraints: {}

  ## The volumes of the Ingress Controller pods.
  volumes: []
  # - name: extra-conf
  #   configMap:
  #     name: extra-conf

  ## The volumeMounts of the Ingress Controller pods.
  volumeMounts: []
  # - name: extra-conf
  #   mountPath: /etc/nginx/conf.d/extra.conf
  #   subPath: extra.conf

  ## InitContainers for the Ingress Controller pods.
  initContainers: []
  # - name: init-container
  #   image: busybox:1.34
  #   command: ['sh', '-c', 'echo this is initial setup!']

  ## The minimum number of seconds for which a newly created Pod should be ready without any of its containers crashing, for it to be considered available.
  minReadySeconds: 0

    ## Strategy used to replace old Pods by new ones. .spec.strategy.type can be "Recreate" or "RollingUpdate". "RollingUpdate" is the default value.
  strategy: {}

  ## Extra containers for the Ingress Controller pods.
  extraContainers: []
  # - name: container
  #   image: busybox:1.34
  #   command: ['sh', '-c', 'echo this is a sidecar!']

  ## The number of replicas of the Ingress Controller deployment.
  replicaCount: 1

  ## A class of the Ingress Controller.

  ## IngressClass resource with the name equal to the class must be deployed. Otherwise,
  ## the Ingress Controller will fail to start.
  ## The Ingress Controller only processes resources that belong to its class - i.e. have the "ingressClassName" field resource equal to the class.

  ## The Ingress Controller processes all the resources that do not have the "ingressClassName" field for all versions of kubernetes.
  ingressClass: nginx

  ## New Ingresses without an ingressClassName field specified will be assigned the class specified in `controller.ingressClass`.
  setAsDefaultIngress: true

  ## Comma separated list of namespaces to watch for Ingress resources. By default the Ingress Controller watches all namespaces.
  watchNamespace: ""

  ## Comma separated list of namespaces to watch for Secret resources. By default the Ingress Controller watches all namespaces.
  watchSecretNamespace: ""

  ## Enable the custom resources.
  enableCustomResources: true

  ## Enable preview policies. This parameter is deprecated. To enable OIDC Policies please use controller.enableOIDC instead.
  enablePreviewPolicies: false

  ## Enable OIDC policies.
  enableOIDC: false

  ## Include year in log header. This parameter will be removed in release 2.7 and the year will be included by default.
  includeYear: false

  ## Enable TLS Passthrough on port 443. Requires controller.enableCustomResources.
  enableTLSPassthrough: true

  ## Enable cert manager for Virtual Server resources. Requires controller.enableCustomResources.
  enableCertManager: false

  ## Enable external DNS for Virtual Server resources. Requires controller.enableCustomResources.
  enableExternalDNS: false

  globalConfiguration:
    ## Creates the GlobalConfiguration custom resource. Requires controller.enableCustomResources.
    create: true

    ## The spec of the GlobalConfiguration for defining the global configuration parameters of the Ingress Controller.
    spec: {}
      # listeners:
      # - name: dns-udp
      #   port: 5353
      #   protocol: UDP
      # - name: dns-tcp
      #   port: 5353
      #   protocol: TCP

  ## Enable custom NGINX configuration snippets in Ingress, VirtualServer, VirtualServerRoute and TransportServer resources.
  enableSnippets: true

  ## Add a location based on the value of health-status-uri to the default server. The location responds with the 200 status code for any request.
  ## Useful for external health-checking of the Ingress Controller.
  healthStatus: false

  ## Sets the URI of health status location in the default server. Requires controller.healthStatus.
  healthStatusURI: "/nginx-health"

  nginxStatus:
    ## Enable the NGINX stub_status, or the NGINX Plus API.
    enable: true

    ## Set the port where the NGINX stub_status or the NGINX Plus API is exposed.
    port: 8080

    ## Add IPv4 IP/CIDR blocks to the allow list for NGINX stub_status or the NGINX Plus API. Separate multiple IP/CIDR by commas.
    allowCidrs: "127.0.0.1"

  service:
    ## Creates a service to expose the Ingress Controller pods.
    create: true

    ## The type of service to create for the Ingress Controller.
    type: ClusterIP

    ## The externalTrafficPolicy of the service. The value Local preserves the client source IP.
    externalTrafficPolicy: Cluster

    ## The annotations of the Ingress Controller service.
    annotations: {}

    ## The extra labels of the service.
    extraLabels: {}

    ## The static IP address for the load balancer. Requires controller.service.type set to LoadBalancer. The cloud provider must support this feature.
    loadBalancerIP: ""

    ## The list of external IPs for the Ingress Controller service.
    externalIPs: 
      - 10.200.1.107

    ## The IP ranges (CIDR) that are allowed to access the load balancer. Requires controller.service.type set to LoadBalancer. The cloud provider must support this feature.
    loadBalancerSourceRanges: []

    ## The name of the service
    ## Autogenerated if not set or set to "".
    # name: nginx-ingress

    ## Whether to automatically allocate NodePorts (only for LoadBalancers).
    # allocateLoadBalancerNodePorts: false

    ## Dual stack preference.
    ## Valid values: SingleStack, PreferDualStack, RequireDualStack
    # ipFamilyPolicy: SingleStack

    ## List of IP families assigned to this service.
    ## Valid values: IPv4, IPv6
    # ipFamilies:
    #   - IPv6

    httpPort:
      ## Enables the HTTP port for the Ingress Controller service.
      enable: false

      ## The HTTP port of the Ingress Controller service.
      port: 80

      ## The custom NodePort for the HTTP port. Requires controller.service.type set to NodePort.
      # nodePort: 80

      ## The HTTP port on the POD where the Ingress Controller service is running.
      targetPort: 80

    httpsPort:
      ## Enables the HTTPS port for the Ingress Controller service.
      enable: true

      ## The HTTPS port of the Ingress Controller service.
      port: 443

      ## The custom NodePort for the HTTPS port. Requires controller.service.type set to NodePort.
      # nodePort: 443

      ## The HTTPS port on the POD where the Ingress Controller service is running.
      targetPort: 443

    ## A list of custom ports to expose through the Ingress Controller service. Follows the conventional Kubernetes yaml syntax for service ports.
    customPorts: []

  serviceAccount:
    ## The annotations of the service account of the Ingress Controller pods.
    annotations: {}

    ## The name of the service account of the Ingress Controller pods. Used for RBAC.
    ## Autogenerated if not set or set to "".
    # name: nginx-ingress

    ## The name of the secret containing docker registry credentials.
    ## Secret must exist in the same namespace as the helm release.
    imagePullSecretName: ""

  serviceMonitor:
    ## Creates a serviceMonitor to expose statistics on the kubernetes pods.
    create: false

    ## The name of the serviceMonitor
    ## Autogenerated if not set or set to "".
    # name: nginx-ingress


    ## Kubernetes object labels to attach to the serviceMonitor object.
    labels: {}

    ## A set of labels to allow the selection of endpoints for the ServiceMonitor.
    selectorMatchLabels: {}

    ## A list of endpoints allowed as part of this ServiceMonitor.
    endpoints: []

  reportIngressStatus:
    ## Updates the address field in the status of Ingress resources with an external address of the Ingress Controller.
    ## You must also specify the source of the external address either through an external service via controller.reportIngressStatus.externalService,
    ## controller.reportIngressStatus.ingressLink or the external-status-address entry in the ConfigMap via controller.config.entries.
    ## Note: controller.config.entries.external-status-address takes precedence over the others.
    enable: true

    ## Specifies the name of the service with the type LoadBalancer through which the Ingress Controller is exposed externally.
    ## The external address of the service is used when reporting the status of Ingress, VirtualServer and VirtualServerRoute resources.
    ## controller.reportIngressStatus.enable must be set to true.
    ## The default is autogenerated and matches the created service (see controller.service.create).
    # externalService: nginx-ingress

    ## Specifies the name of the IngressLink resource, which exposes the Ingress Controller pods via a BIG-IP system.
    ## The IP of the BIG-IP system is used when reporting the status of Ingress, VirtualServer and VirtualServerRoute resources.
    ## controller.reportIngressStatus.enable must be set to true.
    ingressLink: ""

    ## Enable Leader election to avoid multiple replicas of the controller reporting the status of Ingress resources. controller.reportIngressStatus.enable must be set to true.
    enableLeaderElection: true

    ## Specifies the name of the ConfigMap, within the same namespace as the controller, used as the lock for leader election. controller.reportIngressStatus.enableLeaderElection must be set to true.
    ## Autogenerated if not set or set to "".
    # leaderElectionLockName: "nginx-ingress-leader-election"

    ## The annotations of the leader election configmap.
    annotations: {}

  pod:
    ## The annotations of the Ingress Controller pod.
    annotations: {}

    ## The additional extra labels of the Ingress Controller pod.
    extraLabels: {}

  ## The PriorityClass of the ingress controller pods.
  priorityClassName:

  readyStatus:
    ## Enables readiness endpoint "/nginx-ready". The endpoint returns a success code when NGINX has loaded all the config after startup.
    enable: true

    ## Set the port where the readiness endpoint is exposed.
    port: 8081

    ## The number of seconds after the Ingress Controller pod has started before readiness probes are initiated.
    initialDelaySeconds: 0

  ## Enable collection of latency metrics for upstreams. Requires prometheus.create.
  enableLatencyMetrics: false

  ## Disable IPV6 listeners explicitly for nodes that do not support the IPV6 stack.
  disableIPV6: false

rbac:
  ## Configures RBAC.
  create: true

prometheus:
  ## Expose NGINX or NGINX Plus metrics in the Prometheus format.
  create: true

  ## Configures the port to scrape the metrics.
  port: 9113

  ## Specifies the namespace/name of a Kubernetes TLS Secret which will be used to protect the Prometheus endpoint.
  secret: ""

  ## Configures the HTTP scheme used.
  scheme: http

nginxServiceMesh:
  ## Enables integration with NGINX Service Mesh.
  ## Requires controller.nginxplus
  enable: false

  ## Enables NGINX Service Mesh workload to route egress traffic through the Ingress Controller.
  ## Requires nginxServiceMesh.enable
  enableEgress: false
